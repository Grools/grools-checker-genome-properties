/*
* Copyright LABGeM (2014)
*
* author: Jonathan MERCIER
*
* This software is a computer program whose purpose is to annotate a complete genome.
*
* This software is governed by the CeCILL license under French law and
* abiding by the rules of distribution of free software. You can use,
* modify and/ or redistribute the software under the terms of the CeCILL
* license as circulated by CEA, CNRS and INRIA at the following URL
* "http://www.cecill.info".
*
* As a counterpart to the access to the source code and rights to copy,
* modify and redistribute granted by the license, users are provided only
* with a limited warranty and the software's author, the holder of the
* economic rights, and the successive licensors have only limited
* liability.
*
* In this respect, the user's attention is drawn to the risks associated
* with loading, using, modifying and/or developing or reproducing the
* software by the user in light of its specific status of free software,
* that may mean that it is complicated to manipulate, and that also
* therefore means that it is reserved for developers and experienced
* professionals having in-depth computer Concept. Users are therefore
* encouraged to load and test the software's suitability as regards their
* requirements in conditions enabling the security of their systems and/or
* data to be ensured and, more generally, to use and operate it in the
* same conditions as regards security.
*
* The fact that you are presently reading this means that you have had
* Concept of the CeCILL license and that you accept its terms.
*/

package fr.cea.ig.grools;

import fr.cea.ig.grools.model.PriorKnowledge;
import fr.cea.ig.grools.model.KnowledgeStatistics;
import fr.cea.ig.grools.model.LogicStatistics;
import fr.cea.ig.grools.model.FourState;
import fr.cea.ig.grools.model.Conclusion;
global ch.qos.logback.classic.Logger logger;

dialect "mvel"

rule "insert KnowledgeStatistics"
    when
        $k:    PriorKnowledge( )
        not(
                exists( PriorKnowledge( this memberOf $k.partOf) )
            )
        not(
                exists( LogicStatistics( $k := priorKnowledge ) )
            )
    then
        insert( new KnowledgeStatistics( $k ) );
end

rule "compute completeness when knwoledge is present"
    when
         $k:    PriorKnowledge( presence == FourState.TRUE )
         $childs: List() from collect ( PriorKnowledge( $k memberOf partOf ))
         $counter: Number() from accumulate( $child: PriorKnowledge( presence == FourState.TRUE ) from $childs, count( $child ) )
         $ls:   LogicStatistics( $k := priorKnowledge, completeness < (($counter+1) * 100.0 / ($childs.size() + 1))-0.00001 )
    then
        modify( $ls ){
            completeness = ($counter+1) * 100.0 / ($childs.size() + 1);
        }
end

rule "compute completeness when knwoledge is absent"
    when
         $k:    PriorKnowledge( presence == FourState.FALSE )
         $childs: List() from collect ( PriorKnowledge( $k memberOf partOf ))
         $counter: Number() from accumulate( $child: PriorKnowledge( presence == FourState.TRUE ) from $childs, count( $child ) )
         $ls:   LogicStatistics( $k := priorKnowledge, completeness < ($counter * 100.0 / ($childs.size() + 1))-0.00001 )
    then
        modify( $ls ){
            completeness = $counter * 100.0 / ($childs.size() + 1);
        }
end


rule "compute consistency 1"
    when
         $k:    PriorKnowledge( conclusion (== Conclusion.CONFIRMED_PRESENCE || == Conclusion.CONFIRMED_ABSENCE || == Conclusion.UNCONFIRMED_PRESENCE || == Conclusion.UNCONFIRMED_ABSENCE) )
         $childs:  List() from collect ( PriorKnowledge( $k memberOf partOf ))
         $counter: Number() from accumulate( $child : PriorKnowledge( conclusion (
                                                                                == Conclusion.CONFIRMED_PRESENCE    ||
                                                                                == Conclusion.CONFIRMED_ABSENCE     ||
                                                                                == Conclusion.UNCONFIRMED_PRESENCE  ||
                                                                                == Conclusion.UNCONFIRMED_ABSENCE
                                                                               )
                                                               ) from $childs, count( $child ) )
         $ls:   LogicStatistics( $k := priorKnowledge, consistency  < (($counter+1) * 100.0 / ($childs.size() +1 ))-0.00001 )
    then
        modify( $ls ){
            consistency = ($counter+1) * 100.0 / ($childs.size() +1 );
        }
end



rule "compute consistency 2"
    when
         $k:    PriorKnowledge(  )
         $childs: List() from collect ( PriorKnowledge( $k memberOf partOf ))
         $counter: Number() from accumulate( $child : PriorKnowledge( conclusion (
                                                                                == Conclusion.CONFIRMED_PRESENCE    ||
                                                                                == Conclusion.CONFIRMED_ABSENCE     ||
                                                                                == Conclusion.UNCONFIRMED_PRESENCE  ||
                                                                                == Conclusion.UNCONFIRMED_ABSENCE
                                                                               )
                                                               ) from $childs, count( $child ) )
         $ls:   LogicStatistics( $k := priorKnowledge, consistency  < ($counter * 100.0 / ($childs.size() +1 ) )-0.00001 )
    then
        modify( $ls ){
            consistency =  $counter * 100.0 / ($childs.size() +1 );
        }
        //System.out.println( "consistency =  "+Integer.toString($counter)+" * 100.0 / ("+Integer.toString($childs.size())+" +1)" );
end
