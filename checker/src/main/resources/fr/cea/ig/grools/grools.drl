package fr.cea.ig.grools;

import fr.cea.ig.grools.relevant.RelevantObservation;
import fr.cea.ig.grools.relevant.RelevantTheory;

import fr.cea.ig.grools.relevant.terms.ConclusionTerms;
import fr.cea.ig.grools.relevant.terms.ObservationTerms;

import fr.cea.ig.grools.relevant.table.ConclusionEvaluationCell;
import fr.cea.ig.grools.relevant.table.ObservationEvaluationCell;
import fr.cea.ig.grools.relevant.table.RelevantTheoryEvaluationCell;

import fr.cea.ig.grools.model.Term;
import fr.cea.ig.grools.model.Category;
import fr.cea.ig.grools.model.EvaluationCell;
import fr.cea.ig.grools.model.Theory;
import fr.cea.ig.grools.model.Observation;
import fr.cea.ig.grools.model.OperatorLogic;

import fr.cea.ig.grools.Mode;
import fr.cea.ig.grools.Message;

import java.util.List;


dialect  "mvel"


rule "First Prediction assignement"
    when
        $theory:        Theory( $id := id, isPredicted == null )
        $observation:   Observation( theoryId == $id, isAPrediction == true, state != $theory.isPredicted  )
    then
        modify($theory){
            isPredicted = $observation.state
        };
end


rule "Any prediction"
    when
        $theory : Theory( $id := id, isPredicted == null )
        not Theory( $theory memberOf parents ) // only leaf fragment theory
        not Observation(
                                    theoryId        == $id,
                                    isAPrediction   == true
                                )
    then
        modify( $theory ){
            isPredicted = ObservationTerms.UNKNOWN
        };
end


rule "Prediction assignement"
    when
        $theory:        Theory( $id := id, isPredicted != null )
        $observation:   Observation( theoryId == $id, isAPrediction == true )
        $result:        EvaluationCell(
                                        category    == Category.OBSERVATION,
                                        operator    == $theory.operator,
                                        rowEntry    == $observation.state,
                                        columnEntry == $theory.isPredicted,
                                        value       != $theory.isPredicted )
        not Theory( isPredicted != null, this memberOf $theory.parents )
    then
        modify($theory){
            isPredicted = $result.value
        };
end

rule "Prediction assignement need to reevaluate parent"
when
    $theory:        Theory( $id := id, isPredicted != null )
    $observation:   Observation( theoryId == $id, isAPrediction == true )
    $result:        EvaluationCell(
                                    category    == Category.OBSERVATION,
                                    operator    == $theory.operator,
                                    rowEntry    == $observation.state,
                                    columnEntry == $theory.isPredicted,
                                    value       != $theory.isPredicted )
    Theory( isPredicted != null, this memberOf $theory.parents )
then
        modify($theory){
            isPredicted = $result.value,
            needToReEvaluateParent = true
        };

end

rule "Parent prediction is obselote"
when
    $theory:        Theory( $id := id, needToReEvaluateParent == true )
    $parent:        Theory( isPredicted != null, this memberOf $theory.parents )
then
    modify($parent){
        isPredicted = null
    };
end

rule "All Parent prediction has been set to obsolete"
when
    $theory:        Theory( $id := id, needToReEvaluateParent == true )
    forall( Theory( isPredicted == null ) from $theory.parents  )
then
    modify($theory){
        needToReEvaluateParent = false
    };
end


rule "First Expectation assignement"
    when
        $theory:        Theory( $id := id, isExpected == null )
        $observation:   Observation( theoryId == $id, isAnExpectation == true )
    then
        modify($theory){
            isExpected = $observation.state
        };
end


rule "Any expectation"
    when
        $theory : Theory( $id := id, isExpected == null, parents.length == 0 )
        not Observation(
                                    theoryId        == $id,
                                    isAnExpectation == true
                                )
    then
        modify( $theory ){
            isExpected = ObservationTerms.UNKNOWN
        };
end


rule "Expectation assignement"
    when
        $theory:        Theory( $id := id, isExpected != null )
        $observation:   Observation( theoryId == $id, isAnExpectation == true )
        $result:        EvaluationCell(
                                        category    == Category.OBSERVATION,
                                        operator    == OperatorLogic.AND,
                                        rowEntry    == $observation.state,
                                        columnEntry == $theory.isExpected,
                                        value       != $theory.isExpected )
    then
        modify($theory){
            isExpected = $result.value
        };
end


rule "First theory Prediction"
    when
        $theory:    Theory( $id := id, isPredicted == null )
        $fragment:  RelevantTheory( $theory memberOf parents, isPredicted != $theory.isPredicted )
    then
        modify( $theory ){
            isPredicted = $fragment.isPredicted
        };
end


rule "Theory Prediction"
    when
        $theory:    Theory( $id := id, isPredicted != null )
        (
            (
                exists Mode( isMandatoryRuleEnabled == false )
                or
                not Theory( $theory memberOf parents, isMandatory == false  ) // , isPredicted == ObservationTerms.UNKNOWN
            )
            or
            (
                exists Mode( isSpecificRuleEnabled == false )
                or
                not Theory( $theory memberOf parents, isSpecific == true )
            )
        )
        $fragment:  Theory( $theory memberOf parents )
        $result:    EvaluationCell(
                                        category    == Category.THEORY,
                                        operator    == $theory.operator,
                                        rowEntry    == $fragment.isPredicted,
                                        columnEntry == $theory.isPredicted,
                                        value       != $theory.isPredicted )
    then
        modify( $theory ){
            isPredicted = $result.value
        };
end


rule "Theory Prediction using mandatory flag"
    when
        Mode( isMandatoryRuleEnabled == true )
        $theory:    Theory( $id := id, isPredicted != null )
        Theory( $theory memberOf parents, isMandatory == true, isPredicted != ObservationTerms.TRUE )
        $fragment:  Theory( $theory memberOf parents, isMandatory == true, isPredicted != ObservationTerms.UNKNOWN )
        $result:    EvaluationCell(
                                        category    == Category.THEORY,
                                        operator    == $theory.operator,
                                        rowEntry    == $fragment.isPredicted,
                                        columnEntry == $theory.isPredicted,
                                        value       != $theory.isPredicted )
    then
        modify( $theory ){
            isPredicted = $result.value
        };
end



rule "Theory Prediction using specific flag"
    when
        Mode( isSpecificRuleEnabled == true )
        $theory:    Theory( $id := id, isPredicted != null )
        Theory( $theory memberOf parents, isSpecific == true, isPredicted != ObservationTerms.TRUE )
        $fragment:  Theory( $theory memberOf parents, isSpecific == true, isPredicted != ObservationTerms.UNKNOWN )
        $result:    EvaluationCell(
                                        category    == Category.THEORY,
                                        operator    == $theory.operator,
                                        rowEntry    == $fragment.isPredicted,
                                        columnEntry == $theory.isPredicted,
                                        value       != $theory.isPredicted )
    then
        modify( $theory ){
            isPredicted = $result.value
        };
end



rule "First theory expectation"
    when
        $fragment:  Theory( isExpected == null, parents.length > 0 )
        $theory:    Theory( this memberOf $fragment.parents, isExpected != $fragment.isExpected )
    then
        modify( $fragment ){
            isExpected = $theory.isExpected
        };
end


rule "Theory expectation"
    when
        $fragment:  Theory( isExpected != null, parents.length > 0 )
        $theory:    Theory( this memberOf $fragment.parents, isExpected != null )
        $result:    EvaluationCell(
                                        category    == Category.THEORY,
                                        operator    == OperatorLogic.OR,
                                        operator    == $theory.operator,
                                        rowEntry    == $fragment.isExpected,
                                        columnEntry == $theory.isExpected,
                                        value       != $fragment.isExpected )
    then
        modify( $fragment ){
            isExpected = $result.value
        };
end


rule "Conclusion"
    when
        $theory:        Theory( $i := id, isPredicted != null, isPredicted != null )
        $result:        EvaluationCell(
                                        category    == Category.CONCLUSION,
                                        rowEntry    == $theory.isPredicted,
                                        columnEntry == $theory.isExpected,
                                        value       != $theory.conclusion )
    then
        modify($theory){
            conclusion = $result.value
        };
end


rule "enable specific reasoning"
when
    $mode       : Mode()
    $message    : Message( message == "enable specific reasoning")
then
    modify($mode){
        isSpecificRuleEnabled = true
    };
    retract($message);
end


rule "disable specific reasoning"
when
    $mode : Mode()
    $message : Message( message == "disable specific reasoning" )
then
    modify($mode){
        isSpecificRuleEnabled = false
    };
    retract($message);
end


rule "enable mandatory reasoning"
when
    $mode : Mode()
    $message : Message( message == "enable mandatory reasoning" )
then
    modify($mode){
        isMandatoryRuleEnabled = true
    };
    retract($message);
end


rule "disable mandatory reasoning"
when
    $mode : Mode()
    $message : Message( message == "disable mandatory reasoning" )
then
    modify($mode){
        isMandatoryRuleEnabled = false
    };
    retract($message);
end